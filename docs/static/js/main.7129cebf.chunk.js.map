{"version":3,"sources":["pages/MainPage.style.ts","constants/mainPageConstants.ts","utils/utils.tsx","pages/NewEventModal.tsx","pages/MainPage.tsx","reducers/mainPageReducer.ts","reducers/reducer.ts","store.js","index.tsx"],"names":["CalendarWrapper","styled","div","DayWrappedForMonth","isWeekend","FORMATS","dateFormat","dayFormat","dayHeaderFormat","timeGutterFormat","checkDateIfWeekend","date","day","moment","get","defaultEvent","name","title","email","phone","NewEventModal","dispatch","useDispatch","showAddEventModal","useSelector","state","mainPage","activeSlot","useState","inputVal","setInputVal","Modal","onClose","type","payload","open","closeIcon","size","Header","Content","Description","Input","fluid","label","placeholder","onChange","e","value","Actions","Button","color","onClick","positive","MyCalendar","events","localize","momentLocalizer","localizer","step","timeslots","formats","defaultDate","Date","min","max","allDayAccessor","dayPropGetter","className","CustomDayBackground","views","month","style","height","width","onSelectSlot","props","start","end","R","onSelecting","selectable","onSelectEvent","event","alert","eventPropGetter","backgroundColor","components","dateHeader","onDrillDown","messages","previous","next","today","App","mainPageInitialState","initialState","reducer","reduceReducers","action","createStore","undefined","ReactDOM","render","store","StrictMode","MainPage","document","getElementById"],"mappings":"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","file":"static/js/main.7129cebf.chunk.js","sourcesContent":["import styled from 'styled-components/macro';\n\nexport const CalendarWrapper = styled.div`\n  & .rbc-toolbar-label {\n    text-transform: capitalize;\n  }\n\n  & .rbc-row-content {\n    .rbc-show-more,\n    .rbc-event {\n      display: none;\n    }\n  }\n\n  & .rbc-allday-cell {\n    display: none;\n  }\n\n  & .weekendDay {\n    background-color: #e6e6e6;\n    color: #999999;\n  }\n`;\n\nexport const DayWrappedForMonth = styled.div<{ isWeekend: boolean }>`\n  width: 100%;\n  height: 70px;\n  font-size: 2rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: ${({ isWeekend }) => (isWeekend ? '#999999' : 'inherit')};\n`;\n","import { Formats } from 'react-big-calendar';\n\nexport const FORMATS: Formats = {\n  dateFormat: 'DD',\n  dayFormat: 'dd',\n  dayHeaderFormat: 'LL',\n  timeGutterFormat: 'HH:mm',\n};\n","import moment from 'moment';\n\nexport const checkDateIfWeekend = (date: Date): boolean => {\n  const day = moment(date).get('isoWeekday');\n\n  return day === 6 || day === 7;\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Input, Modal } from 'semantic-ui-react';\n\nconst defaultEvent = {\n  name: '',\n  title: '',\n  email: '',\n  phone: '',\n};\n\nfunction NewEventModal() {\n  const dispatch = useDispatch();\n  const showAddEventModal = useSelector((state) => state.mainPage.showAddEventModal);\n  const activeSlot = useSelector((state) => state.mainPage.activeSlot);\n  const [inputVal, setInputVal] = useState(defaultEvent);\n\n  // return dispatch({\n  //   type: 'setEvents',\n  //   payload: {\n  //     start,\n  //     end,\n  //     title: 'qweqweq',\n  //   },\n  // });\n\n  return (\n    <Modal\n      onClose={() => dispatch({ type: 'setShowAddEventModal', payload: false })}\n      open={showAddEventModal}\n      closeIcon\n      size=\"tiny\"\n    >\n      <Modal.Header>Adauga o programare</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          <p>\n            <Input\n              fluid\n              name=\"name\"\n              size=\"large\"\n              label=\"Nume si Prenume\"\n              placeholder=\"Vasiliu Ioan\"\n              onChange={(\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                e,\n                { value },\n              ) =>\n                setInputVal({\n                  ...inputVal,\n                  name: value,\n                  title: value,\n                })\n              }\n            />\n          </p>\n          <p>\n            <Input\n              fluid\n              size=\"large\"\n              type=\"number\"\n              label=\"Numar de Telefon\"\n              placeholder=\"0700111222\"\n              onChange={(\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                e,\n                { value },\n              ) =>\n                setInputVal({\n                  ...inputVal,\n                  phone: value,\n                })\n              }\n            />\n          </p>\n          <p>\n            <Input\n              fluid\n              size=\"large\"\n              type=\"email\"\n              label=\"Email\"\n              placeholder=\"vasiliu.ioan@gmail.com\"\n              onChange={(\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                e,\n                { value },\n              ) =>\n                setInputVal({\n                  ...inputVal,\n                  email: value,\n                })\n              }\n            />\n          </p>\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button\n          color=\"black\"\n          onClick={() => dispatch({ type: 'setShowAddEventModal', payload: false })}\n        >\n          Anuleaza\n        </Button>\n        <Button\n          onClick={() => {\n            dispatch({\n              type: 'setEvents',\n              payload: {\n                ...activeSlot,\n                ...inputVal,\n              },\n            });\n\n            dispatch({ type: 'setShowAddEventModal', payload: false });\n          }}\n          positive\n        >\n          Creaza\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n\nexport default NewEventModal;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\n\nimport * as R from 'ramda';\nimport moment from 'moment';\nimport 'moment/locale/ro';\n\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport * as S from './MainPage.style';\n\nimport { FORMATS } from '../constants/mainPageConstants';\nimport { checkDateIfWeekend } from '../utils/utils';\nimport NewEventModal from './NewEventModal';\n\nconst MyCalendar = () => {\n  const dispatch = useDispatch();\n  const events = useSelector((state) => state.mainPage.events);\n\n  const localize = momentLocalizer(moment);\n\n  const handleSelect = (props) => {\n    const { start, end } = props;\n\n    if (checkDateIfWeekend(start)) return null;\n    if (!R.has('resourceId', props)) return null;\n\n    dispatch({ type: 'setActiveSlot', payload: { start, end } });\n    dispatch({ type: 'setShowAddEventModal', payload: true });\n\n    return null;\n  };\n\n  const MonthViewComponent = (props): JSX.Element => {\n    const { onDrillDown, label, date } = props;\n    const isWeekend = checkDateIfWeekend(date);\n\n    // console.log(props, 'propspropspropspropsprops');\n    return (\n      <S.DayWrappedForMonth\n        isWeekend={isWeekend}\n        onClick={(event) => {\n          !isWeekend && onDrillDown(event);\n        }}\n      >\n        {label}\n      </S.DayWrappedForMonth>\n    );\n  };\n\n  // const monthHeaderView = (props) => {\n  //   console.log(props, 'monthHeaderView');\n  //\n  //   return null;\n  // };\n  // const monthEventView = (props) => {\n  //   console.log(props, 'PROPSmonthEventView');\n  //\n  //   return null;\n  // };\n\n  // const ToolBarComponent = (props) => {\n  //   console.log(props, 'ToolBarComponent');\n  //\n  //   return (\n  //     <div>\n  //       <Button primary>Next</Button>\n  //       <Button secondary>Previous</Button>\n  //     </div>\n  //   );\n  // };\n\n  const CustomDayBackground = (date: Date): object => {\n    if (checkDateIfWeekend(date)) {\n      return {\n        className: 'weekendDay',\n      };\n    }\n\n    return {};\n  };\n\n  return (\n    <>\n      <S.CalendarWrapper>\n        <Calendar\n          localizer={localize}\n          events={events || []}\n          step={30} // steps in minutes for day view\n          timeslots={1} // how many time slots will be occupied by one event\n          formats={FORMATS}\n          defaultDate={new Date()} // start date\n          min={new Date(1970, 1, 1, 9)} // min value of hours displayed by day view\n          max={new Date(1970, 1, 1, 16, 59, 0)} // max value of hours displayed by day view. It\n          // needs to be in minutes till the last hour if the last hour is 17:00\n          allDayAccessor={() => false}\n          dayPropGetter={(date) => CustomDayBackground(date)}\n          views={{ month: true, day: true }} // types of available views\n          style={{ height: 400, width: 800 }} // wrapper style\n          onSelectSlot={handleSelect}\n          onSelecting={() => false} // allows multiple slot selections, false == blocks it\n          selectable\n          onSelectEvent={(event) => alert(event)} // eslint-disable-line\n          eventPropGetter={() => ({ style: { backgroundColor: 'red' } })}\n          components={{\n            month: {\n              dateHeader: MonthViewComponent,\n            },\n            // toolbar: ToolBarComponent,\n          }}\n          messages={{\n            day: 'Zile',\n            month: 'Luna',\n            previous: 'Inapoi',\n            next: 'Inainte',\n            today: 'Ziua curenta',\n          }}\n        />\n      </S.CalendarWrapper>\n    </>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MyCalendar />\n      <NewEventModal />\n    </div>\n  );\n}\n\nexport default App;\n","import { Event } from 'react-big-calendar';\n\nexport interface MainPageInitialStateInterface {\n  events: Event[];\n  showAddEventModal: boolean;\n  activeSlot: { start: Date | null; end: Date | null };\n}\n\nexport const mainPageInitialState: MainPageInitialStateInterface = {\n  events: [],\n  showAddEventModal: false,\n  activeSlot: { start: null, end: null },\n};\n\nexport default function mainPageReducer(state, action) {\n  const { mainPage } = state;\n\n  switch (action.type) {\n    case 'setEvents': {\n      return {\n        ...state,\n        mainPage: {\n          ...mainPage,\n          events: [...mainPage.events, action.payload],\n        },\n      };\n    }\n\n    case 'setShowAddEventModal': {\n      return {\n        ...state,\n        mainPage: {\n          ...mainPage,\n          showAddEventModal: action.payload,\n        },\n      };\n    }\n\n    case 'resetActiveSlot': {\n      return {\n        ...state,\n        mainPage: {\n          ...mainPage,\n          activeSlot: mainPageInitialState.activeSlot,\n        },\n      };\n    }\n\n    case 'setActiveSlot': {\n      return {\n        ...state,\n        mainPage: {\n          ...mainPage,\n          activeSlot: action.payload,\n        },\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import reduceReducers from 'reduce-reducers';\nimport mainPageReducer, { mainPageInitialState } from './mainPageReducer';\n\nconst initialState = {\n  mainPage: mainPageInitialState,\n};\n\nconst reducer = reduceReducers(initialState, mainPageReducer);\n\nexport default reducer;\n","import { createStore } from 'redux';\nimport reducer from './reducers/reducer';\n\nexport default createStore(reducer, undefined);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport MainPage from './pages/MainPage';\n\nimport store from './store';\nimport 'semantic-ui-css/semantic.min.css';\nimport './main.css';\n\ndeclare global {\n  interface Window {\n    store: object;\n  }\n}\n\nif (process.env.NODE_ENV === 'development') {\n  window.store = store.getState;\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <MainPage />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}